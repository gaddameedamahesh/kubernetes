apiVersion: v1
kind: Namespace
metadata:
  name: app-namespace
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: app-namespace
data:
  APP_MESSAGE: "Welcome to the Flask App powered by Kubernetes!"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: app-namespace
type: Opaque
data:
  DB_PASSWORD: bXlwYXNzd29yZA==   # base64 for "mypassword"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-deployment
  namespace: app-namespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-container
          image: python:3.9-slim
          command: ["sh", "-c", "echo \"<h1>${APP_MESSAGE}</h1>\" > index.html && python -m http.server 8080"]
          ports:
            - containerPort: 8080
          env:
            - name: APP_MESSAGE
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: APP_MESSAGE
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: DB_PASSWORD
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: logger-daemon
  namespace: app-namespace
spec:
  selector:
    matchLabels:
      app: logger
  template:
    metadata:
      labels:
        app: logger
    spec:
      containers:
        - name: logger
          image: busybox
          command: ["sh", "-c", "while true; do echo 'Node log from $(hostname)'; sleep 10; done"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: init-job
  namespace: app-namespace
spec:
  template:
    spec:
      containers:
        - name: init-container
          image: busybox
          command: ["sh", "-c", "echo 'Initializing app setup...' && sleep 5"]
      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
  namespace: app-namespace
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flask-ingress
  namespace: app-namespace
spec:
  ingressClassName: nginx   # âœ… modern syntax
  rules:
    - host: flask.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flask-service
                port:
                  number: 80

